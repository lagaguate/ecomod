##############################
#Summarize points within grid#
#J.R. Martin December 2013   #   
##############################

comments = FALSE

##################################USER INPUTS################################
#Copy input file name. If importing csv remember to add .csv
input = "NWATL_Depth" or "NWATL_Depth.csv"

#Are you importing a shapefile or a CSV file. shapefile = TRUE for shapefile, shapefile = FALSE for CSV
shapefile = TRUE

######FOR IMPORTING CSV#######
#If importing csv file insert names for Longitude and Latitude columns
xcol <- "LONGITUDE"
ycol <- "LATITUDE"

#Will you be projecting your csv file to either UTM or geographic coordinates? 
#project = TRUE for projection, project = FALSE for no projection
project = FALSE

#Are you writing a shapefile from an imported csv?
#Do you want your exported shapefile in geographic or projected coordinates?   
#geo = TRUE for geographic, geo = FALSE for geographic
geo = FALSE

##########################

#Proj4strings. Insert projection strings as needed. WGS84 and UTM Zone20N are used below.
##Note: projection strings can be obtained from spatialreference.org - select desired UTM zone and click Proj4.
latlong = "+proj=longlat +ellps=WGS84"
UTM = "+proj=utm +zone=20 ellps=WGS84"

#Insert variable name for summary results 
field = "depth"

#What cell size do you want? For projected coordinates, units are in meters (ex: cell<-2000 = 2km)
#For geographic coordinates, units are in decimal degrees (cell<-1 = 1 decimal degree)
cell <- 2000

#What do you want to name the export file? If exporting csv file, remember to add .csv
#If exporting raster, remember to add .asc
Name = "NewFile"

#insert and set working directory
setwd("C:\\Michelle\\Michelle\\WorkingProjects\\Martin,Ryan\\R")

if (comments) {
  # use file.path instead ::   datadir = file.path( "C:", "Michelle", "Michelle", "WorkingProjects", "Martin\\,Ryan", "R" )
  # setwd ( datadir )
}



#####################################################################################
library(sp)
library(raster)
library(rgdal)
library(maptools)


if (comments) {

  # The library statements should be at the very top ... 
  RLibrary( "sp", "raster", "rgdal", "maptools" )  # if using ecomod

}


#Import csv or shapefile
if(shapefile == TRUE) {  ## BETTER:: ' if (shapefile) '
  shp <- readOGR(".", input)
} else {
  csv <- read.csv(input, sep=",")
  csv <- subset(csv, get(xcol)!=0 & get(ycol)!=0)
}



if (comments) {

  # Better to encode into a separate function .. higde all details except what is relevant
  load.important.data = function( db, datadirectory=getwd(), filename=""  ){
    
    datafile = file.path( datadir, inputfn ) 
    if (! file.exists( datafile) ) stop( "Data file not found")

    if (db =="logbooks.csv") {
      dat <- read.csv( datafile )
    }
    if (db =="logbooks.arcinfo") {
      dat <- readOGR(".", datafile )
      # or 
      # ns = read.shape( datafile, dbf.data=TRUE, verbose=TRUE, repair=FALSE)
      # etc...
    }
    return (dat)
  }

  # datadir = file.path( "C:", "Users", "Jae" ,"Work" )
  datadir = file.path( "~", "work" )
  setwd( datadir  )
  
  inputfn = "logs.csv"

  logs = load.important.data( db="logbooks.csv", datadirectory=datadir, filename=inputfn )
  str( logs)

}





##############################Optional Step#########################################
##Are you using geographic or projected coordinate system? 
##If imported shapefile is already in desired coordinate system, check that *prj file has been read###
proj4string(shp)
#If projection string is correct, skip this step
#If NA, *prj file not read/available - in this case project imported shp file to 
#undesired projection and then back to appropriate projection using code below


###TO CONVERT FROM GEOGRAPHIC TO PROJECTED COORDINATE SYSTEM (UTM ZONE20N used below)  
if(shapefile == TRUE) {
  proj4string(shp) <- CRS(latlong)
  UTM20N<-UTM
  UTM20N<-CRS(UTM20N)
  shp <- spTransform(shp, UTM20N)
} else {
  csv.proj <- project(as.matrix(csv[c(xcol, ycol)]), UTM)
  csv <- cbind(csv.proj, csv)
  names(csv)[1] <- "LON"
  names(csv)[2] <- "LAT"
}

###TO CONVERT FROM PROJECTED (UTM ZONE20N used below) TO GEOGRAPHIC COORDINATE SYSTEM
if(shapefile == TRUE) {
  proj4string(shp) <- CRS(UTM)
  shp <- spTransform(shp, CRS(latlong))
} else {
  csv.proj <- project(as.matrix(csv[c(xcol, ycol)]), UTM, inv=TRUE)
  csv <- cbind(csv.proj, csv)
  names(csv)[1] <- "LON"
  names(csv)[2] <- "LAT"
} 




if (comments) {
  # 1. Hard coding of column numbers not a good idea .. esp is the data structure/orde can change
  # Better: 
  # names(csv)[ which( names ( csv) =="LONGITUDE") ] = "LON"
  # or:
  # rename.df( csv, "LONGITUDE", "LON")  # is using ecomod
}



#############################################################################

#Converts csv into a 'SpatialPointsDataFrame' 'sp' object - LIKELY GET RID OF PROJECT=
if(shapefile == TRUE) {
} else {
  if(project == TRUE) {
  cords <- cbind(x=csv["LON"], Y=csv["LAT"])
  sPDF <- SpatialPointsDataFrame(cords, data=csv)
} else {
  cords <- cbind(x=csv[[xcol]],y=csv[[ycol]])
  sPDF <- SpatialPointsDataFrame(cords, data=csv)
 }
}

#setting extents from the data 
if(shapefile == TRUE) {
  xmn <- min(shp$coords.x1) 
  ymn <- min(shp$coords.x2) 
  xmx <- max(shp$coords.x1) 
  ymx <- max(shp$coords.x2)
} else {   
  if(project == TRUE) {
  xmn <- min(sPDF$LON) 
  ymn <- min(sPDF$LAT) 
  xmx <- max(sPDF$LON) 
  ymx <- max(sPDF$LAT)
} else { 
  xmn <- min(sPDF[[xcol]]) 
  ymn <- min(sPDF[[ycol]]) 
  xmx <- max(sPDF[[xcol]]) 
  ymx <- max(sPDF[[ycol]]) 
 }
}

#set number of rows & columns in the grid
ncols <- length(xmx:xmn)/cell
nrows <- (length(ymx:ymn) - 1)/cell

#create grid and add data into raster to avoid 'no data' error
grid <- raster(nrows=nrows, ncols=ncols, xmn=xmn, xmx=xmx, ymn=ymn, ymx=ymx)
grid[] <- 1:ncell(grid)

#create raster of summary results for points per cell 
if (shapefile == TRUE){
  grid.mean <- rasterize(x=shp, y=grid, field=field, fun=function(x, ...) c(mean(x), min(x), max(x), sd(x)), na.rm=TRUE)
  grid.count <- rasterize(x=shp, y=grid, field=field, fun='count')
} else {
  grid.mean <- rasterize(x=sPDF, y=grid, field=field, fun=function(x, ...) c(mean(x), min(x), max(x), sd(x)), na.rm=TRUE)
  grid.count <- rasterize(x=sPDF, y=grid, field=field, fun='count')
}

#Bring raster layers together
rs <- list(grid.mean, grid.count)
rstack <- stack(rs)

##Convert raster to shapefile or csv. 
#If error occurs, try modifying cell size in user inputs
if (shapefile == TRUE) {
  shp.s <- rasterToPoints(rstack, spatial=TRUE)
  crs<-projection(shp)
  proj4string(shp.s) <- CRS(crs)
  names(shp.s) <-c("mean", "min", "max", "sd", "count")
} else {
  csv.e <- data.frame(rasterToPoints(rstack, spatial=FALSE))
  colnames(csv.e) <- c("Lon", "Lat", "Mean", "Min", "Max", "SD", "Count")
}

#Write table 
if (shapefile == TRUE) {
  write.table(shp.s, file=Name, sep=",",row.names=F)
} else {
  write.table(csv.e, file=Name, sep=",",row.names=F)
}

#Write shapefile 
if (shapefile == TRUE) {
  writeOGR(shp.s, ".", Name, driver="ESRI Shapefile")
} else {
  if (geo == TRUE) {
  cords1<-cbind(x=csv.e["Lon"], y=csv.e["Lat"])
  sPDF1<-SpatialPointsDataFrame(cords1, data=csv.e)
  proj4string(sPDF1)<-CRS(latlong)
  writeOGR(sPDF1, ".", Name, driver="ESRI Shapefile")  
} else {
  cords1<-cbind(x=csv.e["Lon"], y=csv.e["Lat"])
  sPDF1<-SpatialPointsDataFrame(cords1, data=csv.e)
  proj4string(sPDF1)<-CRS(UTM)
  writeOGR(sPDF1, ".", Name, driver="ESRI Shapefile")
 }
}

#Write raster 
writeRaster(rstack, 'Name')

