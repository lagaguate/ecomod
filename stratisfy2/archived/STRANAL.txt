#R version of STRANAL
#Mark Fowler Aug 2014
#Interactive scripting, jumping around between SQL and R
#Current example is 4X Haddock in 1974. This was truthed against the original APL version of STRANAL by Stratis Gavaris.
#Intention is to add STRANAL to SurveyScope as a web application. This scripting file serves to document the methods, and may
# suffice if the APL version is lost to us before incorporation into SurveyScope. Apparently IT will not maintain the original.

#Arithmetic precision differs between APL and R. For example we see differences in stratified means beginning about the 3rd decimal
# place. After all the math and rounding and bumping by trawlable units, we see annual totals of 89563863 from The APL STRANAL and
89563906 from the R STRANAL, a difference of 0.0000005%.

#Using Oracle SQL*Plus (from the DFO SMS) to create custom database objects. Not the only way to do this. Requires
# an account with access to GROUNDFISH on BANK. Replace DSN [if necessary], UserID and PassWord values here. Hopefully I remembered
# to x my pw out before putting this on github.

UserDSN='bank'
UserID='fowler'
PassWord='xxxxxx'

#You need to edit query syntax to match your own account. All below refer to the FOWLER account, for
# example dsquery="SELECT * FROM fowler.alk". A global edit of 'fowler.' to your own
# account name in this text file will cover this.

#Stock identification (species, strata) is hard-coded so must be edited as required for several of the SQL steps.

#Sex and bin width stipulations are the 'official' defaults pulled from groundfish.gsspec. If you want to change these
#go to the SQL step that creates stock_all_raw_age and follow instructions in comments there.

#Encountered a conceivable error in the APL STRANAL, but could also be a known and disregarded issue. This is discussed in comments
# associated with replicating the Length Weight sheet.

#Some scripting is redundant with SurveyScope, but included here so STRANAL can be achieved as a stand-alone job.

#original surveyscope table     
#This is a lookup table for valid surveys by Maritimes and Gulf regions. It must be updated for new surveys when loaded.
#At present we do not resolve NMFS surveys. The APL version does or did (Y/N?).    
rem SURLIST.SQL
set define off
drop table survey_list;
create table survey_list
	( vesel varchar2(3), cruno number, year number, series varchar2(7));
create unique index index_survey on survey_list(vesel, cruno, year, series);
set define on
insert into survey_list values ('ATC',175,1970,'SUMMER ');
insert into survey_list values ('ATC',176,1970,'SUMMER ');
insert into survey_list values ('ATC',188,1971,'SUMMER ');
insert into survey_list values ('ATC',189,1971,'SUMMER ');
insert into survey_list values ('ATC',200,1972,'SUMMER ');
insert into survey_list values ('ATC',201,1972,'SUMMER ');
insert into survey_list values ('ATC',212,1973,'SUMMER ');
insert into survey_list values ('ATC',213,1973,'SUMMER ');
insert into survey_list values ('ATC',225,1974,'SUMMER ');
insert into survey_list values ('ATC',226,1974,'SUMMER ');
insert into survey_list values ('ATC',236,1975,'SUMMER ');
insert into survey_list values ('ATC',237,1975,'SUMMER ');
insert into survey_list values ('ATC',250,1976,'SUMMER ');
insert into survey_list values ('ATC',251,1976,'SUMMER ');
insert into survey_list values ('ATC',265,1977,'SUMMER ');
insert into survey_list values ('ATC',266,1977,'SUMMER ');
insert into survey_list values ('ATC',279,1978,'SUMMER ');
insert into survey_list values ('ATC',280,1978,'SUMMER ');
insert into survey_list values ('ATC',292,1979,'SUMMER ');
insert into survey_list values ('ATC',293,1979,'SUMMER ');
insert into survey_list values ('ATC',306,1980,'SUMMER ');
insert into survey_list values ('ATC',307,1980,'SUMMER ');
insert into survey_list values ('ATC',321,1981,'SUMMER ');
insert into survey_list values ('ATC',322,1981,'SUMMER ');
insert into survey_list values ('HAM',80,1982,'SUMMER ');
insert into survey_list values ('HAM',81,1982,'SUMMER ');
insert into survey_list values ('HAM',231,1991,'SUMMER ');
insert into survey_list values ('NED',12,1983,'SUMMER ');
insert into survey_list values ('NED',13,1983,'SUMMER ');
insert into survey_list values ('NED',31,1984,'SUMMER ');
insert into survey_list values ('NED',32,1984,'SUMMER ');
insert into survey_list values ('NED',48,1985,'SUMMER ');
insert into survey_list values ('NED',49,1985,'SUMMER ');
insert into survey_list values ('NED',65,1986,'SUMMER ');
insert into survey_list values ('NED',66,1986,'SUMMER ');
insert into survey_list values ('NED',85,1987,'SUMMER ');
insert into survey_list values ('NED',86,1987,'SUMMER ');
insert into survey_list values ('NED',87,1987,'SUMMER ');
insert into survey_list values ('NED',105,1988,'SUMMER ');
insert into survey_list values ('NED',106,1988,'SUMMER ');
insert into survey_list values ('NED',123,1989,'SUMMER ');
insert into survey_list values ('NED',124,1989,'SUMMER ');
insert into survey_list values ('NED',139,1990,'SUMMER ');
insert into survey_list values ('NED',140,1990,'SUMMER ');
insert into survey_list values ('NED',154,1991,'SUMMER ');
insert into survey_list values ('NED',173,1992,'SUMMER ');
insert into survey_list values ('NED',174,1992,'SUMMER ');
insert into survey_list values ('NED',189,1993,'SUMMER ');
insert into survey_list values ('NED',190,1993,'SUMMER ');
insert into survey_list values ('NED',221,1994,'SUMMER ');
insert into survey_list values ('NED',222,1994,'SUMMER ');
insert into survey_list values ('NED',226,1995,'SUMMER ');
insert into survey_list values ('NED',227,1995,'SUMMER ');
insert into survey_list values ('NED',246,1996,'SUMMER ');
insert into survey_list values ('NED',247,1996,'SUMMER ');
insert into survey_list values ('NED',726,1997,'SUMMER ');
insert into survey_list values ('NED',734,1997,'SUMMER ');
insert into survey_list values ('NED',827,1998,'SUMMER ');
insert into survey_list values ('NED',832,1998,'SUMMER ');
insert into survey_list values ('NED',925,1999,'SUMMER ');
insert into survey_list values ('NED',929,1999,'SUMMER ');
insert into survey_list values ('NED',426,2000,'SUMMER ');
insert into survey_list values ('NED',431,2000,'SUMMER ');
insert into survey_list values ('NED',32,2001,'SUMMER ');
insert into survey_list values ('NED',37,2001,'SUMMER ');
insert into survey_list values ('NED',37,2002,'SUMMER ');
insert into survey_list values ('NED',40,2002,'SUMMER ');
insert into survey_list values ('NED',36,2003,'SUMMER ');
insert into survey_list values ('NED',42,2003,'SUMMER ');
insert into survey_list values ('TEL',529,2004,'SUMMER ');
insert into survey_list values ('TEL',530,2004,'SUMMER ');
insert into survey_list values ('NED',27,2005,'SUMMER ');
insert into survey_list values ('NED',34,2005,'SUMMER ');
insert into survey_list values ('NED',30,2006,'SUMMER ');
insert into survey_list values ('NED',36,2006,'SUMMER ');
insert into survey_list values ('TEL',745,2007,'SUMMER ');
insert into survey_list values ('TEM',830,2008,'SUMMER ');
insert into survey_list values ('NED',27,2009,'SUMMER ');
insert into survey_list values ('NED',27,2010,'SUMMER ');
insert into survey_list values ('NED',25,2011,'SUMMER ');
insert into survey_list values ('NED',22,2012,'SUMMER ');
insert into survey_list values ('NED',22,2013,'SUMMER ');
insert into survey_list values ('HAM',13,1979,'SPRING ');
insert into survey_list values ('HAM',14,1979,'SPRING ');
insert into survey_list values ('HAM',33,1980,'SPRING ');
insert into survey_list values ('HAM',34,1980,'SPRING ');
insert into survey_list values ('HAM',48,1981,'SPRING ');
insert into survey_list values ('HAM',49,1981,'SPRING ');
insert into survey_list values ('HAM',71,1982,'SPRING ');
insert into survey_list values ('HAM',72,1982,'SPRING ');
insert into survey_list values ('HAM',94,1983,'SPRING ');
insert into survey_list values ('HAM',95,1983,'SPRING ');
insert into survey_list values ('NED',24,1984,'SPRING ');
insert into survey_list values ('NED',25,1984,'SPRING ');
insert into survey_list values ('HAM',9,1978,'FALL   ');
insert into survey_list values ('HAM',10,1978,'FALL   ');
insert into survey_list values ('HAM',26,1979,'FALL   ');
insert into survey_list values ('HAM',27,1979,'FALL   ');
insert into survey_list values ('HAM',42,1980,'FALL   ');
insert into survey_list values ('HAM',43,1980,'FALL   ');
insert into survey_list values ('HAM',64,1981,'FALL   ');
insert into survey_list values ('HAM',65,1981,'FALL   ');
insert into survey_list values ('HAM',84,1982,'FALL   ');
insert into survey_list values ('HAM',85,1982,'FALL   ');
insert into survey_list values ('NED',17,1983,'FALL   ');
insert into survey_list values ('NED',18,1983,'FALL   ');
insert into survey_list values ('NED',36,1984,'FALL   ');
insert into survey_list values ('NED',37,1984,'FALL   ');
insert into survey_list values ('NED',60,1986,'4VWCOD ');
insert into survey_list values ('NED',78,1987,'4VWCOD ');
insert into survey_list values ('NED',98,1988,'4VWCOD ');
insert into survey_list values ('NED',117,1989,'4VWCOD ');
insert into survey_list values ('NED',134,1990,'4VWCOD ');
insert into survey_list values ('NED',149,1991,'4VWCOD ');
insert into survey_list values ('NED',166,1992,'4VWCOD ');
insert into survey_list values ('NED',182,1993,'4VWCOD ');
insert into survey_list values ('NED',201,1994,'4VWCOD ');
insert into survey_list values ('NED',217,1995,'4VWCOD ');
insert into survey_list values ('NED',238,1996,'4VWCOD ');
insert into survey_list values ('NED',255,1997,'4VWCOD ');
insert into survey_list values ('NED',872,1999,'4VWCOD ');
insert into survey_list values ('NED',966,2000,'4VWCOD ');
insert into survey_list values ('NED',4,2001,'4VWCOD ');
insert into survey_list values ('NED',3,2002,'4VWCOD ');
insert into survey_list values ('NED',3,2003,'4VWCOD ');
insert into survey_list values ('NED',2,2005,'4VWCOD ');
insert into survey_list values ('TEL',615,2006,'4VWCOD ');
insert into survey_list values ('TEM',686,2007,'4VWCOD ');
insert into survey_list values ('TEM',687,2007,'4VWCOD ');
insert into survey_list values ('TEL',805,2008,'4VWCOD ');
insert into survey_list values ('NED',2,2009,'4VWCOD ');
insert into survey_list values ('NED',2,2010,'4VWCOD ');
insert into survey_list values ('NED',2,2011,'4VWCOD ');
insert into survey_list values ('NED',59,1986,'GEORGES');
insert into survey_list values ('NED',77,1987,'GEORGES');
insert into survey_list values ('NED',97,1988,'GEORGES');
insert into survey_list values ('NED',116,1989,'GEORGES');
insert into survey_list values ('NED',133,1990,'GEORGES');
insert into survey_list values ('NED',148,1991,'GEORGES');
insert into survey_list values ('NED',165,1992,'GEORGES');
insert into survey_list values ('TEM',134,1993,'GEORGES');
insert into survey_list values ('NED',200,1994,'GEORGES');
insert into survey_list values ('NED',216,1995,'GEORGES');
insert into survey_list values ('NED',237,1996,'GEORGES');
insert into survey_list values ('NED',254,1997,'GEORGES');
insert into survey_list values ('NED',773,1998,'GEORGES');
insert into survey_list values ('NED',871,1999,'GEORGES');
insert into survey_list values ('NED',965,2000,'GEORGES');
insert into survey_list values ('NED',3,2001,'GEORGES');
insert into survey_list values ('NED',2,2002,'GEORGES');
insert into survey_list values ('NED',2,2003,'GEORGES');
insert into survey_list values ('TEM',4,2004,'GEORGES');
insert into survey_list values ('NED',1,2005,'GEORGES');
insert into survey_list values ('TEL',614,2006,'GEORGES');
insert into survey_list values ('TEM',685,2007,'GEORGES');
insert into survey_list values ('TEM',775,2008,'GEORGES');
insert into survey_list values ('NED',841,2009,'GEORGES');
insert into survey_list values ('NED',1,2010,'GEORGES');
insert into survey_list values ('NED',2,2011,'GEORGES');
insert into survey_list values ('NED',2,2012,'GEORGES');
insert into survey_list values ('NED',2,2013,'GEORGES');
insert into survey_list values ('HAM',141,1985,'GULF   ');
insert into survey_list values ('HAM',159,1986,'GULF   ');
insert into survey_list values ('HAM',179,1987,'GULF   ');
insert into survey_list values ('HAM',192,1988,'GULF   ');
insert into survey_list values ('HAM',204,1989,'GULF   ');
insert into survey_list values ('HAM',219,1990,'GULF   ');
insert into survey_list values ('HAM',232,1991,'GULF   ');
insert into survey_list values ('NED',178,1992,'GULF   ');
insert into survey_list values ('NED',192,1993,'GULF   ');
insert into survey_list values ('NED',210,1994,'GULF   ');
insert into survey_list values ('NED',230,1995,'GULF   ');
insert into survey_list values ('NED',249,1996,'GULF   ');
insert into survey_list values ('NED',746,1997,'GULF   ');
insert into survey_list values ('NED',846,1998,'GULF   ');
insert into survey_list values ('NED',941,1999,'GULF   ');
insert into survey_list values ('NED',45,2000,'GULF   ');
insert into survey_list values ('NED',150,2001,'GULF   ');
insert into survey_list values ('NED',251,2002,'GULF   ');
insert into survey_list values ('TEM',352,2003,'GULF   ');
insert into survey_list values ('PRI',91,1971,'GULF   ');
insert into survey_list values ('PRI',106,1972,'GULF   ');
insert into survey_list values ('PRI',122,1973,'GULF   ');
insert into survey_list values ('PRI',143,1974,'GULF   ');
insert into survey_list values ('PRI',157,1975,'GULF   ');
insert into survey_list values ('PRI',172,1976,'GULF   ');
insert into survey_list values ('PRI',188,1977,'GULF   ');
insert into survey_list values ('PRI',204,1978,'GULF   ');
insert into survey_list values ('PRI',229,1979,'GULF   ');
insert into survey_list values ('PRI',244,1980,'GULF   ');
insert into survey_list values ('PRI',260,1981,'GULF   ');
insert into survey_list values ('PRI',278,1982,'GULF   ');
insert into survey_list values ('PRI',296,1983,'GULF   ');
insert into survey_list values ('PRI',312,1984,'GULF   ');
insert into survey_list values ('PRI',327,1985,'GULF   ');
commit;

#original surveyscope tables
#These provide hydrographic data at trawl depth associated with surveys. It all gets wrapped up in the 'bottom' table, which
# is then linked to the sampling data.
#Not required for STRANAL, but can serve as valid set filters so included.
drop table ctd;
drop table bot;
drop table gstri;
create table gstri as 
select vesel, year, cruno
from survey_list 
where series in ('SUMMER ','SPRING ','FALL   ','4VWCOD ','GEORGES') and (year>=1970); 
create index gstri_x on gstri(vesel, year, cruno);
create table ctd as
select h.mission, h.setno, sdepth, gear, temp, sal, bid
from gshyd h, fowler.gstri t
where substr(h.mission,1,3) = t.vesel
and to_number(substr(h.mission,8,3)) = t.cruno
and to_number(substr(h.mission,4,4)) = t.year
and gear=2 and bid='B' and temp is not null;
create index ctd_x on ctd(mission, setno);
select count(*) ctd from ctd;
create table bot as
select h.mission, h.setno, sdepth, gear, temp, sal, bid
from gshyd h, fowler.gstri t
where substr(h.mission,1,3) = t.vesel
and to_number(substr(h.mission,8,3)) = t.cruno
and to_number(substr(h.mission,4,4)) = t.year
and gear=1 and bid='B' and temp is not null;
create index bot_x on bot(mission, setno);
select count(*) bottles from bot;
drop table bottom;
create table bottom as
select * from fowler.ctd
union
select * from fowler.bot
where (mission, setno) in
 (select mission, setno from bot minus
  select mission, setno from ctd);
create index bottom_x on bottom(mission, setno);
select count(*) bottom from bottom;

#original surveyscope table 
#For SurveyScope this is part of a batch job in which custom tables are created for every species and/or stock. The species is
# a substitution variable in the batch job (spec=&&1), hard-coded here.
drop table stock_all_raw_cat;
create table stock_all_raw_cat as
select mission,setno,size_class,totwgt,sampwgt,totno,calwt
from groundfish.gscat where spec=11;

#original surveyscope table         
drop table stock_all_adj_cat;
create table stock_all_adj_cat as
select series, to_number(substr(i.mission,4,4))year,
i.mission,i.setno,w.size_class,sdate,time,strat,area,slat,slong,dmin,dmax,depth,dur,dist,
totwgt raw_totwgt,
NVL(totwgt*1.75/dist,0) totwgt,
totno raw_totno,
NVL(totno*1.75/dist,0) totno,
sampwgt,calwt
from groundfish.gsinf i, stock_all_raw_cat w, survey_list s
where i.mission = w.mission(+)
and i.setno = w.setno(+)
and substr(i.mission,1,3) = s.vesel
and to_number(substr(i.mission,8,3)) = s.cruno
and to_number(substr(i.mission,4,4)) = s.year;

#STRANAL-specific tables from here on
#Provide data to build age:length keys and age composition. Species is hard-coded.
#Grab default bin width and whether age composition should be sexed or not from gsspec.
#If you want non-default stipulations for bins or sexing, replace the variable values below, e.g. lgrp 1,lfsexed 'Y'
#The bin width and sex stipulations would be options in an app (default or custom).
drop table stock_all_raw_age;
create table stock_all_raw_age as
select mission,setno,size_class,fsex,age,fwt,
decode(1,1,flen,2,.5+2*floor(flen/2),3,1+3*floor(flen/3),flen) flen,
lgrp binwidth,lfsexed bysex,
clen
from groundfish.gsdet g, groundfish.gsspec s
where g.spec=11
and s.spec=g.spec(+);

#Adjust raw counts for subsampling and actual tow distance (relative to standard 1.75 nm tow).
#Aggregate counts at length according to the bin width.
#Provide trawlable units for strata. Seems the survey database should include a table with these.
#Only addresses standard Maritimes and Gulf region survey strata, not NMFS or Industry surveys.
drop table stock_all_adj_age;
create table stock_all_adj_age as
select series,year,strat,
decode(strat,'401',235751 
,'402',287613 
,'403',288206 
,'404',12711 
,'405',38473 
,'406',394048 
,'407',149399 
,'408',269817 
,'409',127112 
,'410',248801 
,'411',32117 
,'412',29163 
,'413',38319 
,'414',9580 
,'415',64742 
,'416',90419 
,'417',44489 
,'418',33388 
,'419',37540 
,'420',65505 
,'421',27880 
,'422',105418 
,'423',272105 
,'424',88979 
,'425',53387 
,'426',32880 
,'427',80589 
,'428',17118 
,'429',143722 
,'431',120248 
,'432',25507 
,'433',100673 
,'434',102622 
,'435',54150 
,'436',81182 
,'437',41947 
,'438',14237 
,'439',37202 
,'440',78301 
,'441',84741 
,'442',121773 
,'443',111689 
,'444',332610 
,'445',86691 
,'446',41608 
,'447',136942 
,'448',122790 
,'449',12203 
,'450',32456 
,'451',12457 
,'452',29236 
,'453',21948 
,'454',42286 
,'455',179821 
,'456',80928 
,'457',68725 
,'458',55765 
,'459',266766 
,'460',113893 
,'461',97792 
,'462',179313 
,'463',25592 
,'464',109910 
,'465',201939 
,'466',19152 
,'470',77962 
,'471',85080 
,'472',105842 
,'473',22456 
,'474',13643 
,'475',13220 
,'476',125248 
,'477',104401 
,'478',19745 
,'480',55506 
,'481',158890 
,'482',88301 
,'483',45082 
,'484',191855 
,'485',134061 
,'490',50930 
,'491',58217 
,'492',92029 
,'493',45167 
,'494',35337 
,'495',49489 
,'501',67369 
,'502',106096 
,'503',194482 
,'504',260919 
,'505',197956 
,'506',138807 
,'507',271088 
,'508',170669 
,0 ) tunits,
c.mission,c.setno,dist,sampwgt,raw_totwgt,c.size_class,fsex,bysex,binwidth,floor(flen/binwidth)*binwidth flen,age,fwt,
decode(sampwgt,0,0,NULL,NULL,(raw_totwgt/sampwgt)*1.75/dist*clen) cage
from stock_all_adj_cat c, stock_all_raw_age l
where c.mission=l.mission(+)
and c.setno=l.setno(+)
and c.size_class=l.size_class(+);

#The primary table to accomplish STRANAL.
#Includes some spurious variables that some might want to consider as explanatory or filter variates (e.g. don't include sets below some
# temperature).
#Making flen reflect the centre of its bin.
drop table stock_agelen;
create table stock_agelen as
select a.series,a.mission,substr(i.mission,1,3) vessel,
to_number(substr(i.mission,4,4)) year,
to_number(substr(i.mission,8,3)) cruno,a.setno,
i.strat,i.slat,i.slong, ga.name,nvl(i.depth,-99) depth, nvl(i.dmin,-99) dmin,
nvl(i.dmax,-99) dmax, nvl(i.time,-999) loctime,
nvl(b.SDEPTH,-99.9) sdepth, nvl(b.TEMP,-99.99) temp, nvl(b.SAL,-99.999) sal,
a.dist, a.tunits,a.sampwgt,a.raw_totwgt,a.size_class,a.fsex,bysex,binwidth,a.flen+(binwidth*.5)-.5 flen,a.age,a.fwt,a.cage
from groundfish.gsinf i, stock_all_adj_age a, fowler.bottom b, groundfish.gsstratum ga
where i.mission=a.mission(+)
and i.setno=a.setno(+)
and i.mission=b.mission(+)
and i.setno=b.setno(+)
and i.strat=ga.strat(+)
and type='1';


#From here on replicating the APL STRANAL Excel sheet outputs in the same order as they appear in the Excel file. Skipped the first (QUERY) sheet
# and only do the second (Strata Area) sheet in SQL (without summing for totals). All the rest conform to the Excel file that I was given for
# truthing, inclusive of formatting, making it easy to compare with historical results.

#Strata Area sheet
#Hard-coded selection of strata 470-495 (4X Haddock stock definition)
set pagesize 2500
set linesize 250
select strat,decode(substr(strat,1,3),'401',235751 
,'402',287613 
,'403',288206 
,'404',12711 
,'405',38473 
,'406',394048 
,'407',149399 
,'408',269817 
,'409',127112 
,'410',248801 
,'411',32117 
,'412',29163 
,'413',38319 
,'414',9580 
,'415',64742 
,'416',90419 
,'417',44489 
,'418',33388 
,'419',37540 
,'420',65505 
,'421',27880 
,'422',105418 
,'423',272105 
,'424',88979 
,'425',53387 
,'426',32880 
,'427',80589 
,'428',17118 
,'429',143722 
,'431',120248 
,'432',25507 
,'433',100673 
,'434',102622 
,'435',54150 
,'436',81182 
,'437',41947 
,'438',14237 
,'439',37202 
,'440',78301 
,'441',84741 
,'442',121773 
,'443',111689 
,'444',332610 
,'445',86691 
,'446',41608 
,'447',136942 
,'448',122790 
,'449',12203 
,'450',32456 
,'451',12457 
,'452',29236 
,'453',21948 
,'454',42286 
,'455',179821 
,'456',80928 
,'457',68725 
,'458',55765 
,'459',266766 
,'460',113893 
,'461',97792 
,'462',179313 
,'463',25592 
,'464',109910 
,'465',201939 
,'466',19152 
,'470',77962 
,'471',85080 
,'472',105842 
,'473',22456 
,'474',13643 
,'475',13220 
,'476',125248 
,'477',104401 
,'478',19745 
,'480',55506 
,'481',158890 
,'482',88301 
,'483',45082 
,'484',191855 
,'485',134061 
,'490',50930 
,'491',58217 
,'492',92029 
,'493',45167 
,'494',35337 
,'495',49489 
,'501',67369 
,'502',106096 
,'503',194482 
,'504',260919 
,'505',197956 
,'506',138807 
,'507',271088 
,'508',170669 
,0 ) tunits,area
 from groundfish.gsstratum
where substr(strat,1,3)>='470' and substr(strat,1,3)<='495'
order by substr(strat,1,3);

#age length key (not formatted for output)
drop table alk;
create table alk as
select age,flen,sum(setno/setno) cage from stock_agelen
where year=1974 and age is not null
and to_number(strat)>=470 and to_number(strat)<=495
group by age,flen
order by age,flen;

#length by set sheet (not formatted for output)
drop table lset;
create table lset as
select strat,slat,slong,name unitarea,mission,setno,flen,sum(cage) cage from stock_agelen
where year=1974 and to_number(strat)>=470 and to_number(strat)<=495
group by strat,slat,slong,name,mission,setno,flen
order by strat,slat,slong,name,mission,setno,flen;

#age length weight sheet (not formatted for output)
drop table alw;
create table alw as
select age,flen,avg(fwt)/1000 meanwt from stock_agelen
where year=1974 and age is not null
and to_number(strat)>=470 and to_number(strat)<=495
group by age,flen
order by age,flen;

#lookup table for numbers of sets and area in nm per strata
drop table xxx1;
create table xxx1 as
select strat,setno,sum(setno/setno) recs
from stock_agelen
where year=1974 and to_number(strat)>=470 and to_number(strat)<=495
group by strat,setno
order by strat,setno;
drop table xxx2;
create table xxx2 as
select x.strat,sum(x.recs/x.recs) sets, g.area areanm
from xxx1 x, groundfish.gsstratum g
where x.strat=g.strat
group by x.strat,g.area
order by x.strat,g.area;

#stratified LF table
#cage is the count at length adjusted for real tow distance and sample weight bumped to total weight
#sage is stratified numbers at length
#summing over sex and size_class (sex would be an option in the application)
#adding number of sets per strata to each record for convenient math
drop table LF;
create table LF as
select vessel,mission,sa.strat,tunits,setno,flen, sum(cage) cage, sum(nvl(cage,0)*tunits) sage, sets
from stock_agelen sa, xxx2 x
where year=1974 and to_number(sa.strat)>=470 and to_number(sa.strat)<=495
and x.strat=sa.strat(+)
group by sa.strat,tunits,vessel,mission,setno,flen,sets
order by sa.strat,tunits,vessel,mission,setno,flen,sets;

#weight by set sheet (not formatted for output)
drop table setwgt;
create table setwgt as
select sa.strat,sa.slat,sa.slong,sa.name unitarea,sa.mission,setno,sets,tunits,x.areanm,avg(raw_totwgt*1.75/dist) setwt
 from stock_agelen sa, xxx2 x
where year=1974 and to_number(sa.strat)>=470 and to_number(sa.strat)<=495
and x.strat=sa.strat(+)
group by sa.strat,sa.mission,setno,sa.slat,sa.slong,sa.name,sets,tunits,x.areanm
order by sa.strat,sa.mission,setno,sa.slat,sa.slong,sa.name,sets,tunits,x.areanm;

#switching to R
	library(RODBC)
	options(stringsAsFactors = FALSE)

#Age Length Key
	dsquery="SELECT * FROM fowler.alk"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	alk<-sqlQuery(channel,dsquery)
	names(alk) = c("age","flen","cage")
alktable=as.data.frame(tapply(alk$cage,list(alk$flen,alk$age),sum))
alktable[is.na(alktable)]=0
agetotal=rowSums(alktable)
#proportions at age per length from ALK
propage=alktable/agetotal
alktable=cbind(alktable,agetotal)
lentotal=colSums(alktable)
#display the ALK
displayalk=rbind(alktable,lentotal)
rownames(displayalk)[dim(displayalk)[1]]="TOTAL"
displayalk

#Age Table
	dsquery="SELECT * FROM fowler.LF"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	lfdata<-sqlQuery(channel,dsquery)
	names(lfdata) = c("vessel","mission","strat","tunits","setno","flen","cage","slen","sets")
lfdata$strataset=paste(lfdata$vessel,lfdata$mission,lfdata$strat,lfdata$setno,sep="")
lfdata$stratnumlen=lfdata$slen/lfdata$sets
#apply proportions at length per age from aged data to LF
abundanceatlength=tapply(lfdata$stratnumlen,list(lfdata$flen),sum)
lenvec=as.numeric(rownames(propage))
agevec=as.numeric(names(propage))
agetable=abundanceatlength*propage
meanlenvec=rep(NA,length(agevec))
for(c in 1:dim(agetable)[2])meanlenvec[c]=weighted.mean(lenvec,agetable[,c])
displayagetable=rbind(agetable,meanlenvec)
rownames(displayagetable)[dim(displayagetable)[1]]="Avg. Lgths"
displayagetable

#Age Length Weight
#DOCUMENTING A POSSIBLE ERROR HERE. NO DOCUMENTATION WITH STRANAL TO VERIFY.
#The Avg Wgt values in the margins of the Excel sheet are weighted means, the weights being the abundances from the Age Table. The
# scripting below replicates the Excel sheet. However it is not actually correct. A problem with weight data is the scale to which
# our instruments can reach, very small fish (new recruits) posing a problem. These can obtain weights of zero at the precision of
# shipboard scales. This is particularly evident on older cruises (eventually we adopted two scales to address this). The STRANAL
# Excel output does not include weights of zero in computations. Trouble is these can be associated with a lot of fish, so the Avg
# Wgt can be exaggerated by this approach. On the other hand the zero weights are also incorrect, so including them would under-estimate
# the Avg Wgt. However I suspect the over-estimation is of larger magnitude than the potential under-estimation. Could be an oversight,
# or could have been known and disregarded. Only matters at young ages (e.g. 1-2 for haddock in 1974), and might have been investigated
# and deemed insignificant.
	dsquery="SELECT * FROM fowler.alw"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	alw<-sqlQuery(channel,dsquery)
	names(alw) = c("age","flen","meanwt")
ALWsheet=tapply(alw$meanwt,list(alw$flen,alw$age),mean)
#The commented-out altALWsheet lines include fish of weight '0', the active lines exclude them
avgwgtbyagevec=rep(NA,length(agevec))
avgwgtbylenvec=rep(NA,length(agevec))
for(c in 1:dim(agetable)[2])avgwgtbyagevec[c]=weighted.mean(ALWsheet[,c],agetable[,c],na.rm=T)
for(c in 1:dim(agetable)[1])avgwgtbylenvec[c]=weighted.mean(ALWsheet[c,],agetable[c,],na.rm=T)
#altALWsheet=ALWsheet
#altALWsheet[is.na(altALWsheet) & agetable>0]=0
#for(c in 1:dim(agetable)[2])avgwgtbyagevec[c]=weighted.mean(altALWsheet[,c],agetable[,c],na.rm=T)
#for(c in 1:dim(agetable)[1])avgwgtbylenvec[c]=weighted.mean(altALWsheet[c,],agetable[c,],na.rm=T)
displayalw=rbind(cbind(ALWsheet,avgwgtbylenvec),c(avgwgtbyagevec,NA))
rownames(displayalw)[dim(displayalw)[1]]="Avg. Wgt."
colnames(displayalw)[dim(displayalw)[2]]="Avg. Wgt."
displayalw

#Length By Set
	dsquery="SELECT * FROM fowler.lset"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	lset<-sqlQuery(channel,dsquery)
	names(lset) = c("strat","slat","slong","unitarea","mission","setno","flen","cage")
setvar=paste(lset$strat,lset$slat,lset$slong,lset$unitarea,lset$mission,lset$setno,sep=" ")
LbS=tapply(lset$cage,list(setvar,lset$flen),mean)
LbS[is.na(LbS)]=0
LbSsheet=cbind(LbS,rowSums(LbS))
LbSsheet

#Length Mean sheet; mean number at length by strata, marginal means weighted by trawlable units
LMsheet=tapply(lfdata$cage/lfdata$sets,list(lfdata$strat,lfdata$flen),sum)
LMsheet[is.na(LMsheet)]=0
tunitsvec=tapply(lfdata$tunits,list(lfdata$strat),mean)
stratabunbylenvec=rep(NA,length(lenvec))
for(c in 1:dim(LMsheet)[2])stratabunbylenvec[c]=weighted.mean(LMsheet[,c],tunitsvec)
displayLM=rbind(LMsheet,stratabunbylenvec)
displayLM=cbind(displayLM,c(rowSums(LMsheet),sum(stratabunbylenvec)))
#The TOTAL label for the bottom row might be misleading, as the bottom row is the stratified mean
rownames(displayLM)[dim(displayLM)[1]]="TOTAL"
colnames(displayLM)[dim(displayLM)[2]]="TOTAL"
displayLM

#Length Mean SE sheet
#shortcut trick with sets per strata for mean numbers does not allow for error measures (no zero counts); also zaps all-zero strata
#want a filled length by strata by set array but R does not do ragged arrays (conveniently) so do a dataframe
stratavec=as.numeric(rownames(LMsheet))
setvec=as.numeric(tapply(lfdata$sets,list(lfdata$strat),mean,na.rm=T))
setmat=tapply(lfdata$sets/lfdata$sets,list(lfdata$strat,lfdata$strataset),sum)
fillzero=rep(0,length(lenvec)*sum(setvec))
LFSD=data.frame(strat=fillzero,tunits=fillzero,flen=fillzero,set=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(lenvec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
LFSD$strat[inc]=stratavec[s]
LFSD$tunits[inc]=tunitsvec[s]
LFSD$sets[inc]=setvec[s]
LFSD$flen[inc]=lenvec[l]
curset=names(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],])])[nss]
LFSD$set[inc]=curset
seekvalue=lfdata$cage[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
seekstratvalue=lfdata$stratnumlen[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))LFSD$meannum[inc]=seekvalue
if(!is.na(seekvalue))LFSD$stratnum[inc]=seekstratvalue
}
}
}
}
yyy=tapply(LFSD$meannum,list(LFSD$strat,LFSD$flen),sd)
LMSE=yyy/sqrt(setvec)
stratabunbylenerrmat=matrix(NA,length(stratavec),length(lenvec))
for(s in 1:length(stratavec)) {
for(c in 1:length(lenvec))stratabunbylenerrmat[s,c]=var(LFSD$meannum[LFSD$strat==stratavec[s] & LFSD$flen==lenvec[c]])
}
StratLenSE=rep(NA,length(lenvec))
for(c in 1:length(lenvec))StratLenSE[c]=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * stratabunbylenerrmat[,c])/setvec))
NumByStratSet=aggregate(LFSD$meannum, by=list(strat=LFSD$strat,tunits=LFSD$tunits,set=LFSD$set,sets=LFSD$sets),sum)
StratSE=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSE[s]=sqrt(var(NumByStratSet$x[NumByStratSet$strat==stratavec[s]]))/sqrt(setvec[s])
}
StratVar=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVar[s]=var(NumByStratSet$x[NumByStratSet$strat==stratavec[s]])
}
TotalSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * StratVar)/setvec))
displayLMSE=rbind(LMSE,StratLenSE)
displayLMSE=cbind(displayLMSE,c(StratSE,TotalSE))
rownames(displayLMSE)[dim(displayLMSE)[1]]="TOTAL"
colnames(displayLMSE)[dim(displayLMSE)[2]]="TOTAL"
displayLMSE
#StratSE and TotalSE are the same for the Age SE sheet

#Length Total sheet; total number at length, bumped by trawlable units
LTsheet=tapply(lfdata$slen/lfdata$sets,list(lfdata$strat,lfdata$flen),sum)
LTsheet[is.na(LTsheet)]=0
displayLT=rbind(LTsheet,colSums(LTsheet))
displayLT=cbind(displayLT,rowSums(displayLT))
rownames(displayLT)[dim(displayLT)[1]]="TOTAL"
colnames(displayLT)[dim(displayLT)[2]]="TOTAL"
displayLT

#Length Total SE sheet
LFSDtot=data.frame(strat=fillzero,tunits=fillzero,flen=fillzero,set=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(lenvec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
LFSDtot$strat[inc]=stratavec[s]
LFSDtot$tunits[inc]=tunitsvec[s]
LFSDtot$sets[inc]=setvec[s]
LFSDtot$flen[inc]=lenvec[l]
curset=names(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],])])[nss]
LFSDtot$set[inc]=curset
seekvalue=lfdata$cage[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]*lfdata$tunits[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))LFSDtot$meannum[inc]=seekvalue
}
}
}
}
yyy=tapply(LFSDtot$meannum,list(LFSDtot$strat,LFSDtot$flen),sd)
LTSE=yyy/sqrt(setvec)
stratabunbylentoterrmat=matrix(NA,length(stratavec),length(lenvec))
for(s in 1:length(stratavec)) {
for(c in 1:length(lenvec))stratabunbylentoterrmat[s,c]=var(LFSDtot$meannum[LFSDtot$strat==stratavec[s] & LFSDtot$flen==lenvec[c]])
}
StratLenSEtot=rep(NA,length(lenvec))
for(c in 1:length(lenvec))StratLenSEtot[c]=sqrt(sum(stratabunbylentoterrmat[,c]/setvec))
NumByStratSetTot=aggregate(LFSDtot$meannum, by=list(strat=LFSDtot$strat,tunits=LFSDtot$tunits,set=LFSDtot$set,sets=LFSDtot$sets),sum)
StratSEtot=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEtot[s]=sqrt(var(NumByStratSetTot$x[NumByStratSetTot$strat==stratavec[s]]))/sqrt(setvec[s])
}
StratVarTot=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarTot[s]=var(NumByStratSetTot$x[NumByStratSetTot$strat==stratavec[s]])
}
TotalSEtot=sqrt(sum(StratVarTot/setvec))
displayLTSE=rbind(LTSE,StratLenSEtot)
displayLTSE=cbind(displayLTSE,c(StratSEtot,TotalSEtot))
rownames(displayLTSE)[dim(displayLTSE)[1]]="TOTAL"
colnames(displayLTSE)[dim(displayLTSE)[2]]="TOTAL"
displayLTSE
#StratSEtot and TotalSEtot are the same for the Age Total SE sheet

#Age-related sheets

#age by set sheet
adjabundanceatlengthbyset=tapply(lfdata$cage,list(lfdata$strataset,lfdata$flen),sum)
adjabundanceatlengthbyset[is.na(adjabundanceatlengthbyset)]=0
adjabundanceatagebyset=matrix(0,dim(adjabundanceatlengthbyset)[1],length(agevec))
for(s in 1:dim(adjabundanceatagebyset)[1])adjabundanceatagebyset[s,]=as.numeric(colSums(LbS[s,]*propage))
AFbyset=cbind.data.frame("STRATA SLAT SLONG AREA CRUISE SET"=rownames(LbS),adjabundanceatagebyset)
AFbyset=cbind(AFbyset,TOTAL=rowSums(adjabundanceatagebyset))
AFbyset

#Age Mean sheet; mean number at age by strata, not bumped by trawlable units
adjabundanceatagebystrata=matrix(0,length(stratavec),length(agevec))
for(s in 1:dim(adjabundanceatagebystrata)[1])adjabundanceatagebystrata[s,]=colSums(LMsheet[s,]*propage)
colnames(adjabundanceatagebystrata)=agevec
rownames(adjabundanceatagebystrata)=stratavec
stratabunbyagevec=rep(NA,length(agevec))
for(c in 1:dim(adjabundanceatagebystrata)[2])stratabunbyagevec[c]=weighted.mean(adjabundanceatagebystrata[,c],tunitsvec)
displayAM=rbind(adjabundanceatagebystrata,stratabunbyagevec)
displayAM=cbind(displayAM,c(rowSums(adjabundanceatagebystrata),sum(stratabunbyagevec)))
#The TOTAL label for the bottom row might be misleading, as the bottom row is the stratified mean
rownames(displayAM)[dim(displayAM)[1]]="TOTAL"
colnames(displayAM)[dim(displayAM)[2]]="TOTAL"
displayAM


#Age Mean SE sheet
AFbysetstrat=substr(AFbyset[,1],1,3)
numericset=as.numeric(substr(AFbyset[,1],28,30))
strataset=paste(substr(AFbyset[,1],18,27),AFbysetstrat,numericset,sep="")
AMSD=matrix(0,length(stratavec),length(agevec))
for(a in 1:length(agevec))AMSD[,a]=tapply(AFbyset[,a+1],list(AFbysetstrat),sd)
AMSE=AMSD/sqrt(setvec)
#need detailed set-specific equivalent to lfdata for numbers at age
totrecs=sum((adjabundanceatagebyset/adjabundanceatagebyset),na.rm=T)
setrecs=rowSums((adjabundanceatagebyset/adjabundanceatagebyset),na.rm=T)
#number records is number of age records (totrecs) plus number of void sets
voidsets=dim(AFbyset[AFbyset$TOTAL==0.0,])[1]
fillna=rep(NA,(totrecs+voidsets))
afdata=data.frame(strat=fillna, tunits=fillna,strataset=fillna,sets=fillna,age=fillna,fage=fillna,sage=fillna)
i=0
is=0
for(t in 1:length(setvec)) {
for(s in 1:setvec[t]) {
is=is+1
if(setrecs[is]==0) {
i=i+1
afdata[i,]=c(AFbysetstrat[is],tunitsvec[t],strataset[is],setvec[t],"NA","NA","NA")
next
}
for(r in 1:length(agevec)) {
i=i+1
if(adjabundanceatagebyset[is,r]<=0.0) {
i=i-1
next
}
afdata[i,]=c(AFbysetstrat[is],tunitsvec[t],strataset[is],setvec[t],agevec[r],adjabundanceatagebyset[is,r],adjabundanceatagebyset[is,r]*tunitsvec[t])
}
}
}
fillzero=rep(0,length(agevec)*sum(setvec))
AFSD=data.frame(strat=fillzero,tunits=fillzero,age=fillzero,set=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(agevec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
AFSD$strat[inc]=stratavec[s]
AFSD$tunits[inc]=tunitsvec[s]
AFSD$sets[inc]=setvec[s]
AFSD$age[inc]=agevec[l]
curset=names(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],])])[nss]
curset=substr(curset,4,nchar(curset))
AFSD$set[inc]=curset
seekvalue=afdata$fage[afdata$strat==stratavec[s] & afdata$strataset==curset & afdata$age==agevec[l]]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))AFSD$meannum[inc]=seekvalue
}
}
}
}
AFSD$meannum[AFSD$meannum=="NA"]=0
AFSD$meannum=as.numeric(AFSD$meannum)
yyy=tapply(AFSD$meannum,list(AFSD$strat,AFSD$age),sd)
AMSE=yyy/sqrt(setvec)
stratabunbyageerrmat=matrix(NA,length(stratavec),length(agevec))
for(s in 1:length(stratavec)) {
for(c in 1:length(agevec))stratabunbyageerrmat[s,c]=var(AFSD$meannum[AFSD$strat==stratavec[s] & AFSD$age==agevec[c]])
}
StratAgeSE=rep(NA,length(agevec))
for(c in 1:length(agevec))StratAgeSE[c]=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * stratabunbyageerrmat[,c])/setvec))
NumAgeByStratSet=aggregate(AFSD$meannum, by=list(strat=AFSD$strat,tunits=AFSD$tunits,set=AFSD$set,sets=AFSD$sets),sum)
StratSEAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEAge[s]=sqrt(var(NumAgeByStratSet$x[NumAgeByStratSet$strat==stratavec[s]]))/sqrt(setvec[s])
}
StratVarAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarAge[s]=var(NumAgeByStratSet$x[NumAgeByStratSet$strat==stratavec[s]])
}
TotalSEAge=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * StratVarAge)/setvec))
displayAMSE=rbind(AMSE,StratAgeSE)
displayAMSE=cbind(displayAMSE,c(StratSEAge,TotalSEAge))
rownames(displayAMSE)[dim(displayAMSE)[1]]="TOTAL"
colnames(displayAMSE)[dim(displayAMSE)[2]]="TOTAL"
displayAMSE
#StratSEAge and TotalSEAge are the same for the Length SE sheet

#Age Total sheet; total number at age, bumped by trawlable units
afdata$sage=as.numeric(afdata$sage)
afdata$sets=as.numeric(afdata$sets)
ATsheet=tapply(afdata$sage/afdata$sets,list(afdata$strat,afdata$age),sum)
ATsheet[is.na(ATsheet)]=0
displayAT=rbind(ATsheet,colSums(ATsheet))
displayAT=cbind(displayAT,rowSums(displayAT))
rownames(displayAT)[dim(displayAT)[1]]="TOTAL"
colnames(displayAT)[dim(displayAT)[2]]="TOTAL"
displayAT

#Age Total SE sheet
fillzero=rep(0,length(agevec)*sum(setvec))
afdata$fage=as.numeric(afdata$fage)
afdata$fage[is.na(afdata$fage)]=0
afdata$strat=as.numeric(afdata$strat)
afdata$age=as.numeric(afdata$age)
afdata$tunits=as.numeric(afdata$tunits)
AFSDtot=data.frame(strat=fillzero,tunits=fillzero,age=fillzero,set=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(agevec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
AFSDtot$strat[inc]=stratavec[s]
AFSDtot$tunits[inc]=tunitsvec[s]
AFSDtot$sets[inc]=setvec[s]
AFSDtot$age[inc]=agevec[l]
curset=names(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],])])[nss]
curset=substr(curset,4,nchar(curset))
AFSDtot$set[inc]=curset
seekvalue=afdata$fage[afdata$strat==stratavec[s] & afdata$age==agevec[l] & afdata$strataset==curset]*afdata$tunits[afdata$strat==stratavec[s] & afdata$age==agevec[l] & afdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))AFSDtot$meannum[inc]=seekvalue
}
}
}
}
AFSDtot$meannum[AFSD$AFSDtot=="NA"]=0
AFSDtot$meannum=as.numeric(AFSDtot$meannum)
yyy=tapply(AFSDtot$meannum,list(AFSDtot$strat,AFSDtot$age),sd)
ATSE=yyy/sqrt(setvec)
stratabunbyagetoterrmat=matrix(NA,length(stratavec),length(agevec))
for(s in 1:length(stratavec)) {
for(c in 1:length(agevec))stratabunbyagetoterrmat[s,c]=var(AFSDtot$meannum[AFSDtot$strat==stratavec[s] & AFSDtot$age==agevec[c]])
}
StratAgeSEtot=rep(NA,length(agevec))
for(c in 1:length(agevec))StratAgeSEtot[c]=sqrt(sum(stratabunbyagetoterrmat[,c]/setvec))
NumAgeByStratSetTot=aggregate(AFSDtot$meannum, by=list(strat=AFSDtot$strat,tunits=AFSDtot$tunits,set=AFSDtot$set,sets=AFSDtot$sets),sum)
StratSEtotAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEtotAge[s]=sqrt(var(NumAgeByStratSetTot$x[NumAgeByStratSetTot$strat==stratavec[s]]))/sqrt(setvec[s])
}
StratVarTotAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarTotAge[s]=var(NumAgeByStratSetTot$x[NumAgeByStratSetTot$strat==stratavec[s]])
}
TotalSEtotAge=sqrt(sum(StratVarTotAge/setvec))
displayATSE=rbind(ATSE,StratAgeSEtot)
displayATSE=cbind(displayATSE,c(StratSEtotAge,TotalSEtotAge))
rownames(displayATSE)[dim(displayATSE)[1]]="TOTAL"
colnames(displayATSE)[dim(displayATSE)[2]]="TOTAL"
displayATSE
#StratSEtotAge and TotalSEtotAge are the same for the Length Total SE sheet

#Weight sheets

	dsquery="SELECT * FROM fowler.setwgt"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	setwgt<-sqlQuery(channel,dsquery)
	names(setwgt) = c("strat","slat","slong","area","mission","setno","sets","tunits","areanm","setwt") 
setwgt$setwt[is.na(setwgt$setwt)]=0
#display set weights table
setwgt[,c(1:6,10)]
#Weight Mean
WM=tapply(setwgt$setwt/setwgt$sets,list(setwgt$strat),sum)
xxx=cbind(STRATA=stratavec,TOTAL=WM)
displayWM=rbind(xxx,c("TOTAL",weighted.mean(WM,tunitsvec)))
displayWM
#Weight Mean SE
WMSE=tapply(setwgt$setwt,list(setwgt$strat),sd)/sqrt(setvec)
WMvar=tapply(setwgt$setwt,list(setwgt$strat),var)
StratWSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * WMvar)/setvec))
displayWMSE=rbind(cbind(STRATA=stratavec,TOTAL=WMSE),c("TOTAL",StratWSE))
displayWMSE
#stratified weight by strata
WMtot=tapply(setwgt$setwt*setwgt$tunits/setwgt$sets,list(setwgt$strat),sum)
displayWMtot=rbind(cbind(STRATA=stratavec,TOTAL=WMtot),c("TOTAL",sum(WMtot)))
displayWMtot
#stratified weight SE
WMSEtot=tapply(setwgt$setwt*setwgt$tunits,list(setwgt$strat),sd)/sqrt(setvec)
WMtotvar=tapply(setwgt$setwt*setwgt$tunits,list(setwgt$strat),var)
WMgrandtotSE=sqrt(sum(WMtotvar/setvec))
displaySWMSE=rbind(cbind(STRATA=stratavec,TOTAL=WMSEtot),c("TOTAL",WMgrandtotSE))
displaySWMSE

#Area sheets
#proportion by area sheet
setwgt$gotone=0
setwgt$gotone[setwgt$setwt>0]=1
areaprop=tapply(setwgt$gotone/setwgt$sets,list(setwgt$strat),sum)
displayArea=rbind(cbind(STRATA=stratavec,TOTAL=areaprop),c("TOTAL",weighted.mean(areaprop,tunitsvec)))
displayArea
#proportion by area se sheet
areapropse=tapply(setwgt$gotone,list(setwgt$strat),sd)/sqrt(setvec)
areapropvar=tapply(setwgt$gotone,list(setwgt$strat),var)
StratAreaSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * areapropvar)/setvec))
displayAreaSE=rbind(cbind(STRATA=stratavec,TOTAL=areapropse),c("TOTAL",StratAreaSE))
displayAreaSE

#proportion of strata in nm^2 with fish
stratarea=tapply(setwgt$areanm*setwgt$gotone,list(setwgt$strat),mean)
totarea=sum(stratarea)
displayTotArea=rbind(cbind(STRATA=stratavec,TOTAL=stratarea),c("TOTAL",totarea))
displayTotArea
#SE of proportion of strata in nm^2 with fish
stratarease=tapply(setwgt$areanm*setwgt$gotone,list(setwgt$strat),sd)/sqrt(setvec)
areapropvarnm=tapply(setwgt$gotone*setwgt$areanm,list(setwgt$strat),var)
areaproptotse=sqrt(sum(areapropvarnm/setvec))
displayTotAreaSE=rbind(cbind(STRATA=stratavec,TOTAL=stratarease),c("TOTAL",areaproptotse))
displayTotAreaSE

###DONE###

#scripting for downloading the core table if desired.
#We do not actually have to download this table, as we do STRANAL by extracting pieces of it in various ways.
	dsquery="SELECT * FROM fowler.stock_agelen where year=1974 and to_number(strat)>=470 and to_number(strat)<=495"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	stock<-sqlQuery(channel,dsquery)
	names(stock) = c("series","mission","vessel","year","cruno", "setno", "strat", "slat", "slong", 
		"depth", "dmin", "dmax", "loctime", 
		"sdepth", "temp", "sal", "dist","tunits","sampwgt","rawtotwgt","sizeclass",
		"fsex","bysex","binwidth","flen","age","fwt","cage")

