#R version of STRANAL fro US surveys
#Mark Fowler Aug 2014
#Developed in case APL is lost
#Modified version May 2015 to handle US NMFS survey data as provided through TRAC
#the example is dogfish in 1979.  This was truthed for 1979 and 1992 against the original APL version of STRANAL by Stratis Gavaris.
#Interactive scripting, jumping around between SQL and R
#Intention is to add STRANAL to SurveyScope as a web application whenever we develop a replacement for the VDC.

#Selection criteria provided through the APL STRANAL dialogbox have to be hard-coded.

#Some potential for confusion for those familiar with using STRANAL with Canadian surveys. Comment coding tries to cover this. Also
# note that the formatting and structure of analytical tables mirrors that for Canadian surveys so the same output scripting can be
# used. Thus US data tables , etc, can have superfluous variables to match.

#Using Oracle SQL*Plus (from the DFO SMS) to create custom database objects. Not the only way to do this. 
#Requires an account with access to GROUNDFISH on BANK. Replace DSN [if necessary], UserID and PassWord values here. 
#Hopefully I remember to x my pw out before putting this out somewhere.
UserDSN='ptran'
UserID='fowler'
PassWord='xxxxxx'
#You need to edit query syntax to match your own account. All below refer to the FOWLER account, for
# example dsquery="SELECT * FROM fowler.alk". A global edit of 'fowler.' to your own
# account name in this text file will cover this.

#Purpose code 10 identifies the NMFS bottom trawl survey, but purpose_code is not included in the station table, so need to match by cruise names
#The cruise name does not include the vessel because multiple vessels may conduct the same survey
drop table us_survey_list;
create table us_survey_list as
select cruise6,year,season from usnefsc.uss_mstr_cruise where season in ('SPRING','SUMMER','FALL','WINTER') and purpose_code='10'
group by cruise6,year,season;


#NMFS catch data may be split by sex (not just in detailed sampling), so need to select or sum over sex codes for sexed or unsexed estimates
#A sexed selection would edit the where clause, e.g. females:
#and catchsex in ('2')
drop table stock_all_raw_cat;
create table stock_all_raw_cat as
select cruise6 mission,to_number(station) setno, sum(expcatchwt) totwgt,sum(expcatchnum) totno
from usnefsc.uss_catch where to_number(svspp)=15
and catchsex in ('0','1','2')
group by cruise6,station;

#NMFS numbers and weights already adjusted for distance towed (no dist variable, 1.75 assumed)
#doing survey series selection here
drop table stock_all_adj_cat;
create table stock_all_adj_cat as
select season, s.year,
i.cruise6 mission,to_number(i.station) setno,begin_est_towdate sdate,est_time time,stratum strat,area,beglat slat,beglon slong,mindepth dmin,maxdepth dmax,avgdepth depth,towdur dur, 1.75 dist,
totwgt raw_totwgt,
NVL(totwgt,0) totwgt,
totno raw_totno,
NVL(totno,0) totno
from usnefsc.uss_station i, stock_all_raw_cat w, us_survey_list s
where i.cruise6 = w.mission(+)
and to_number(i.station) = w.setno(+)
and i.cruise6 = s.cruise6
and i.est_year = s.year
and s.season='SPRING';

#STRANAL-specific tables from here on
#Provide data to build age:length keys and age composition. Species is hard-coded.
#Select or combine sexes here
#NMFS age/length/weight data is contained in 2 tables, not 1 table like DFO; NMFS length-frequency data goes into a separate table,
# so have to merge the NMFS tables later on (mentioning this if first time doing US surveys, familiar with doing Canadian surveys - processing differs
#The nmfs_detail table will be empty if neither aging or individual weights taken
drop table nmfs_detail;
create table nmfs_detail as
select cruise6, station,age,length,avg(indwt) fwt
from usnefsc.uss_detail
where to_number(svspp)=15
and sex in ('0','1','2')
group by cruise6,station,age,length;
drop table nmfs_lf;
create table nmfs_lf as
select cruise6, station,length,sum(expnumlen) clen
from usnefsc.uss_lengths
where to_number(svspp)=15
and catchsex in ('0','1','2')
group by cruise6,station,length;

#The bin width and sex stipulations would be options in an app (default or custom). Hard-coded here. The bysex is so something in dataset to remind.
#Default bin width and whether age composition should be sexed or not comes from groundfish.gsspec for DFO surveys, usnefsc.usspec for NMFS surveys.
#The usspec sex and bin criteria for dogfish are incorrect, unsexed and no binning. In reality they are sexed and use 3cm bins.
#To be able to compare to the APL version need to do unsexed, unbinned estimates.
#If you want non-default stipulations for bins or sexing, replace the variable values below, e.g. lgrp 1,lfsexed 'Y'
drop table stock_all_raw_age;
create table stock_all_raw_age as
select l.cruise6 mission,to_number(l.station) setno,d.age,d.fwt,
decode(1,1,l.length,2,.5+2*floor(l.length/2),3,1+3*floor(l.length/3),l.length) flen,
1 binwidth,'N' bysex, clen
from nmfs_detail d,nmfs_lf l
where l.cruise6=d.cruise6(+)
and l.station=d.station(+)
and l.length=d.length(+);

#for unsexed estimates of a sexed species have to corrupt the sex value and aggregate
drop table sar_age;
create table sar_age as
select mission, setno,age,avg(fwt) fwt,flen,binwidth,bysex,sum(clen) clen
from stock_all_raw_age
group by mission, setno,age,flen,binwidth,bysex;

#Adjust raw counts for subsampling and actual tow distance (relative to standard 1.75 nm tow).
#Aggregate counts at length according to the bin width.
#Provide trawlable units for strata. Dogfish-specific strata hard-coded here.
#Only addresses NMFS surveys.
#Do not have sample weight with NMFS
#NMFS numbers and weights are pre-adjusted for sampling (samplewt=totalwt)
#Do not have size class partitions with NMFS
#Selection of series done here.
#Be aware NMFS data can have fish without catch weights (e.g. set 174 of the 1979 spring survey). Probably rare, the odd single fish, but potential surprise if accustomed to Canadian data.
drop table stock_all_adj_age;
create table stock_all_adj_age as
select season,year,strat,
decode(strat,'01010',257105.6,
'01020',212347.152941176,
'01030',57838.5411764706,
'01040',19211.3882352941,
'01050',150727.647058824,
'01060',260988.752941176,
'01070',52524.7529411765,
'01080',23503.2941176471,
'01090',155530.494117647,
'01100',278156.376470588,
'01110',63561.0823529412,
'01120',17985.1294117647,
'01130',242594.870588235,
'01140',67035.4823529412,
'01150',23503.2941176471,
'01160',304520.941176471,
'01170',36787.7647058823,
'01180',17576.3764705882,
'01190',250769.929411765,
'01200',124771.835294118,
'01210',43327.8117647059,
'01220',46393.4588235294,
'01230',103823.247058824,
'01240',262521.576470588,
'01250',39853.4117647059,
'01260',103618.870588235,
'01270',73575.5294117647,
'01280',229821.341176471,
'01290',331600.823529412,
'01300',63254.5176470588,
'01330',87984.0705882353,
'01340',180464.423529412,
'01350',112100.494117647,
'01351',54466.3294117647,
'01360',415803.929411765,
'01370',215412.8,
'01380',261601.882352941,
'01390',74597.4117647059,
'01400',59064.8,
'01610',134684.094117647,
'01620',24831.7411764706,
'01630',8788.18823529412,
'01640',6131.29411764706,
'01650',289397.082352941,
'01660',56714.4705882353,
'01670',8788.18823529412,
'01680',5313.78823529412,
'01690',248623.976470588,
'01700',104640.752941176,
'01710',28714.8941176471,
'01720',10729.7647058824,
'01730',219193.764705882,
'01740',130085.623529412,
'01750',14204.1647058824,
'01760',6131.29411764706,
0) tunits,
c.mission,c.setno,dist,raw_totwgt sampwgt,raw_totwgt,bysex,binwidth,floor(flen/binwidth)*binwidth flen,age,fwt,clen cage
from stock_all_adj_cat c, sar_age l
where c.mission=l.mission(+)
and c.setno=l.setno(+)
and c.season='SPRING';


#The primary table to accomplish STRANAL.
#Making flen reflect the centre of its bin.
#The SHG variable is a multi-code (Set Type,Haul Type,Gear Condition) selection filter used to identify valid sets in NMFS surveys
#The tunits value will be zero for unselected strata
drop table stock_agelen;
create table stock_agelen as
select a.season,a.mission,'XXX' vessel,
a.year,
999 cruno,a.setno,
i.stratum strat,i.beglat slat,i.beglon slong, i.area,nvl(i.avgdepth,-99) depth, nvl(i.mindepth,-99) dmin,
nvl(i.maxdepth,-99) dmax, nvl(i.est_time,-999) loctime,
nvl(i.SETDEPTH,-99.9) sdepth, nvl(i.BOTTEMP,-99.99) temp, nvl(i.BOTSALIN,-99.999) sal,
a.dist, a.tunits,a.sampwgt,a.raw_totwgt,bysex,binwidth,a.flen+(binwidth*.5)-.5 flen,a.age,a.fwt,a.cage
from usnefsc.uss_station i, stock_all_adj_age a
where i.cruise6=a.mission(+)
and to_number(i.station)=a.setno(+)
and to_number(i.shg)<='136'
and tunits>0;


#From here on replicating the APL STRANAL Excel sheet outputs in the same order as they appear in the Excel file.
#Note you can skip blocks of code that do not apply to the given stock (e.g. age-related outputs for an unaged stock) - so long as you know
# which ones they are. Running such blocks of code where inapplicable does no harm, just creates empty output tables and associated error messages.

#Where a block of code is noted as 'not formatted for output' it just means the output has been readied in SQL and will
# be downloaded and further processed in R later to mirror the Excel output tables of the APL STRANAL.

#The strata selection is hard-coded throughout.

#Strata Area sheet
#Hard-coded selection of US dogfish strata (as reported in 43rd SAW)
set pagesize 2500
set linesize 250
select strat,
decode(strat,'01010',257105.6,
'01020',212347.152941176,
'01030',57838.5411764706,
'01040',19211.3882352941,
'01050',150727.647058824,
'01060',260988.752941176,
'01070',52524.7529411765,
'01080',23503.2941176471,
'01090',155530.494117647,
'01100',278156.376470588,
'01110',63561.0823529412,
'01120',17985.1294117647,
'01130',242594.870588235,
'01140',67035.4823529412,
'01150',23503.2941176471,
'01160',304520.941176471,
'01170',36787.7647058823,
'01180',17576.3764705882,
'01190',250769.929411765,
'01200',124771.835294118,
'01210',43327.8117647059,
'01220',46393.4588235294,
'01230',103823.247058824,
'01240',262521.576470588,
'01250',39853.4117647059,
'01260',103618.870588235,
'01270',73575.5294117647,
'01280',229821.341176471,
'01290',331600.823529412,
'01300',63254.5176470588,
'01330',87984.0705882353,
'01340',180464.423529412,
'01350',112100.494117647,
'01351',54466.3294117647,
'01360',415803.929411765,
'01370',215412.8,
'01380',261601.882352941,
'01390',74597.4117647059,
'01400',59064.8,
'01610',134684.094117647,
'01620',24831.7411764706,
'01630',8788.18823529412,
'01640',6131.29411764706,
'01650',289397.082352941,
'01660',56714.4705882353,
'01670',8788.18823529412,
'01680',5313.78823529412,
'01690',248623.976470588,
'01700',104640.752941176,
'01710',28714.8941176471,
'01720',10729.7647058824,
'01730',219193.764705882,
'01740',130085.623529412,
'01750',14204.1647058824,
'01760',6131.29411764706,
0) tunits,area
 from groundfish.gsstratum
where strat in 
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
order by strat;

#age length key (not formatted for output)
#empty table for 1979 or 1992
drop table alk;
create table alk as
select age,flen,sum(setno/setno) cage from stock_agelen
where year=1992 and age is not null
and strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
group by age,flen
order by age,flen;

#length by set sheet (not formatted for output)
drop table lset;
create table lset as
select strat,slat,slong,area unitarea,mission,setno,flen,sum(cage) cage from stock_agelen
where year=1992
and strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
group by strat,slat,slong,area,mission,setno,flen
order by strat,slat,slong,area,mission,setno,flen;

#age length weight sheet (not formatted for output)
#NMFS weights in kgs, not grams like DFO
#empty table for 1979 or 1992
drop table alw;
create table alw as
select age,flen,avg(fwt) meanwt from stock_agelen
where year=1992 and age is not null
and strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
group by age,flen
order by age,flen;

#lookup table for numbers of sets and area in nm per strata
drop table xxx1;
create table xxx1 as
select strat,setno,sum(setno/setno) recs
from stock_agelen
where year=1992
and strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
group by strat,setno
order by strat,setno;
drop table xxx2;
create table xxx2 as
select x.strat,sum(x.recs/x.recs) sets, g.area areanm
from xxx1 x, groundfish.gsstratum g
where x.strat=g.strat
group by x.strat,g.area
order by x.strat,g.area;

#stratified LF table
#cage is the count at length adjusted for real tow distance and sample weight bumped to total weight
#sage is stratified numbers at length
#adding number of sets per strata to each record
drop table LF;
create table LF as
select vessel,mission,sa.strat,tunits,setno,flen, sum(cage) cage, sum(nvl(cage,0)*tunits) sage, sets
from stock_agelen sa, xxx2 x
where year=1992
and sa.strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
and x.strat=sa.strat(+)
group by sa.strat,tunits,vessel,mission,setno,flen,sets
order by sa.strat,tunits,vessel,mission,setno,flen,sets;

#weight by set sheet (not formatted for output)
drop table setwgt;
create table setwgt as
select sa.strat,sa.slat,sa.slong,sa.area unitarea,sa.mission,setno,sets,tunits,x.areanm,avg(raw_totwgt*1.75/dist) setwt
 from stock_agelen sa, xxx2 x
where year=1992
and sa.strat in
('01010','01020','01030','01040','01050','01060','01070','01080','01090','01100','01110','01120','01130','01140','01150','01160','01170','01180','01190','01200','01210','01220','01230','01240','01250','01260','01270','01280','01290','01300','01330','01340','01350','01351','01360','01370','01380','01390','01400','01610','01620','01630','01640','01650','01660','01670','01680','01690','01700','01710','01720','01730','01740','01750','01760')
and x.strat=sa.strat(+)
group by sa.strat,sa.mission,setno,sa.slat,sa.slong,sa.area,sets,tunits,x.areanm
order by sa.strat,sa.mission,setno,sa.slat,sa.slong,sa.area,sets,tunits,x.areanm;

#switching to R
	library(RODBC)
	options(stringsAsFactors = FALSE)

#Age Length Key
	dsquery="SELECT * FROM fowler.alk"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	alk<-sqlQuery(channel,dsquery)
	names(alk) = c("age","flen","cage")
alktable=as.data.frame(tapply(alk$cage,list(alk$flen,alk$age),sum,na.rm=T))
alktable[is.na(alktable)]=0
agetotal=rowSums(alktable,na.rm=T)
#proportions at age per length from ALK
propage=alktable/agetotal
alktable=cbind(alktable,agetotal)
lentotal=colSums(alktable,na.rm=T)
#display the ALK
displayalk=rbind(alktable,lentotal)
rownames(displayalk)[dim(displayalk)[1]]="TOTAL"
displayalk

#Age Table
	dsquery="SELECT * FROM fowler.LF"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	lfdata<-sqlQuery(channel,dsquery)
	names(lfdata) = c("vessel","mission","strat","tunits","setno","flen","cage","slen","sets")
lfdata$strataset=paste(lfdata$vessel,lfdata$mission,lfdata$strat,lfdata$setno,sep="")
lfdata$stratnumlen=lfdata$slen/lfdata$sets
#apply proportions at length per age from aged data to LF
abundanceatlength=tapply(lfdata$stratnumlen,list(lfdata$flen),sum,na.rm=T)
#with NMFS data we won't have propage unless the fish were aged, so need
lenvec=as.numeric(rownames(propage))
agevec=as.numeric(names(propage))
agetable=abundanceatlength*propage
meanlenvec=rep(NA,length(agevec))
for(c in 1:dim(agetable)[2])meanlenvec[c]=weighted.mean(lenvec,agetable[,c],na.rm=T)
displayagetable=rbind(agetable,meanlenvec)
rownames(displayagetable)[dim(displayagetable)[1]]="Avg. Lgths"
displayagetable

#Age Length Weight
#The Avg Wgt values in the margins of the Excel sheet are weighted means, the weights being the abundances from the Age Table. The
# scripting below replicates the Excel sheet. However it is not actually correct. A problem with weight data is the scale to which
# our instruments can reach, very small fish (new recruits) posing a problem. These can obtain weights of zero at the precision of
# shipboard scales. This is particularly evident on older cruises (eventually we adopted two scales to address this). The STRANAL
# Excel output does not include weights of zero in computations. Trouble is these can be associated with a lot of fish, so the Avg
# Wgt can be exaggerated by this approach. On the other hand the zero weights are also incorrect, so including them would under-estimate
# the Avg Wgt. However I suspect the over-estimation is of larger magnitude than the potential under-estimation. Could be an oversight,
# or could have been known and disregarded. Only matters at young ages (e.g. 1-2 for haddock in 1974), and might have been investigated and deemed insignificant.
	dsquery="SELECT * FROM fowler.alw"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	alw<-sqlQuery(channel,dsquery)
	names(alw) = c("age","flen","meanwt")
ALWsheet=tapply(alw$meanwt,list(alw$flen,alw$age),mean,na.rm=T)
#The commented-out altALWsheet lines include fish of weight '0', the active lines exclude them
avgwgtbyagevec=rep(NA,length(agevec))
avgwgtbylenvec=rep(NA,length(agevec))
for(c in 1:dim(agetable)[2])avgwgtbyagevec[c]=weighted.mean(ALWsheet[,c],agetable[,c],na.rm=T)
for(c in 1:dim(agetable)[1])avgwgtbylenvec[c]=weighted.mean(ALWsheet[c,],agetable[c,],na.rm=T)
#altALWsheet=ALWsheet
#altALWsheet[is.na(altALWsheet) & agetable>0]=0
#for(c in 1:dim(agetable)[2])avgwgtbyagevec[c]=weighted.mean(altALWsheet[,c],agetable[,c],na.rm=T)
#for(c in 1:dim(agetable)[1])avgwgtbylenvec[c]=weighted.mean(altALWsheet[c,],agetable[c,],na.rm=T)
displayalw=rbind(cbind(ALWsheet,avgwgtbylenvec),c(avgwgtbyagevec,NA))
rownames(displayalw)[dim(displayalw)[1]]="Avg. Wgt."
colnames(displayalw)[dim(displayalw)[2]]="Avg. Wgt."
displayalw

#Length By Set
	dsquery="SELECT * FROM fowler.lset"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	lset<-sqlQuery(channel,dsquery)
	names(lset) = c("strat","slat","slong","unitarea","mission","setno","flen","cage")
setvar=paste(lset$strat,lset$slat,lset$slong,lset$unitarea,lset$mission,lset$setno,sep=" ")
lset=lset[order(setvar),]
sortvar=paste(lset$strat,lset$setno,sep=" ")
sortvar=unique(sortvar)
LbS=tapply(lset$cage,list(setvar,lset$flen),mean,na.rm=T)
LbS[is.na(LbS)]=0
LbSsheet=cbind(LbS,rowSums(LbS))
LbSsheet[order(sortvar),]

#Length Mean sheet; mean number at length by strata, marginal means weighted by trawlable units
LMsheet=tapply(lfdata$cage/lfdata$sets,list(lfdata$strat,lfdata$flen),sum,na.rm=T)
LMsheet[is.na(LMsheet)]=0
tunitsvec=tapply(lfdata$tunits,list(lfdata$strat),mean,na.rm=T)
stratabunbylenvec=rep(NA,length(lenvec))
for(c in 1:dim(LMsheet)[2])stratabunbylenvec[c]=weighted.mean(LMsheet[,c],tunitsvec,na.rm=T)
displayLM=rbind(LMsheet,stratabunbylenvec)
displayLM=cbind(displayLM,c(rowSums(LMsheet,na.rm=T),sum(stratabunbylenvec,na.rm=T)))
#The TOTAL label for the bottom row might be misleading, as the bottom row is the stratified mean
rownames(displayLM)[dim(displayLM)[1]]="TOTAL"
colnames(displayLM)[dim(displayLM)[2]]="TOTAL"
displayLM

#Length Mean SE sheet
#shortcut trick with sets per strata for mean numbers does not allow for error measures (no zero counts); also zaps all-zero strata
#want a filled length by strata by set array but R does not do ragged arrays (conveniently) so do a dataframe
stratavec=as.numeric(rownames(LMsheet))
setvec=as.numeric(tapply(lfdata$sets,list(lfdata$strat),mean,na.rm=T))
setmat=tapply(lfdata$sets/lfdata$sets,list(lfdata$strat,lfdata$strataset),sum,na.rm=T)
lenvec=as.numeric(colnames(LMsheet))
fillzero=rep(0,length(lenvec)*sum(setvec,na.rm=T))
LFSD=data.frame(strat=fillzero,tunits=fillzero,flen=fillzero,set=fillzero,sets=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(lenvec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
LFSD$strat[inc]=stratavec[s]
LFSD$tunits[inc]=tunitsvec[s]
LFSD$sets[inc]=setvec[s]
LFSD$flen[inc]=lenvec[l]
curset=colnames(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],]),drop=FALSE])[nss]
LFSD$set[inc]=curset
seekvalue=lfdata$cage[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
seekstratvalue=lfdata$stratnumlen[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))LFSD$meannum[inc]=seekvalue
if(!is.na(seekvalue))LFSD$stratnum[inc]=seekstratvalue
}
}
}
}
yyy=tapply(LFSD$meannum,list(LFSD$strat,LFSD$flen),sd,na.rm=T)
LMSE=yyy/sqrt(setvec)
stratabunbylenerrmat=matrix(NA,length(stratavec),length(lenvec))
for(s in 1:length(stratavec)) {
for(c in 1:length(lenvec))stratabunbylenerrmat[s,c]=var(LFSD$meannum[LFSD$strat==stratavec[s] & LFSD$flen==lenvec[c]],na.rm=T)
}
StratLenSE=rep(NA,length(lenvec))
for(c in 1:length(lenvec))StratLenSE[c]=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * stratabunbylenerrmat[,c])/setvec,na.rm=T))
NumByStratSet=aggregate(LFSD$meannum, by=list(strat=LFSD$strat,tunits=LFSD$tunits,set=LFSD$set,sets=LFSD$sets),sum,na.rm=T)
StratSE=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSE[s]=sqrt(var(NumByStratSet$x[NumByStratSet$strat==stratavec[s]],na.rm=T))/sqrt(setvec[s])
}
StratVar=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVar[s]=var(NumByStratSet$x[NumByStratSet$strat==stratavec[s]],na.rm=T)
}
TotalSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * StratVar)/setvec,na.rm=T))
displayLMSE=rbind(LMSE,StratLenSE)
displayLMSE=cbind(displayLMSE,c(StratSE,TotalSE))
rownames(displayLMSE)[dim(displayLMSE)[1]]="TOTAL"
colnames(displayLMSE)[dim(displayLMSE)[2]]="TOTAL"
displayLMSE
#StratSE and TotalSE are the same for the Age SE sheet

#Length Total sheet; total number at length, bumped by trawlable units
LTsheet=tapply(lfdata$slen/lfdata$sets,list(lfdata$strat,lfdata$flen),sum,na.rm=T)
LTsheet[is.na(LTsheet)]=0
displayLT=rbind(LTsheet,colSums(LTsheet,na.rm=T))
displayLT=cbind(displayLT,rowSums(displayLT,na.rm=T))
rownames(displayLT)[dim(displayLT)[1]]="TOTAL"
colnames(displayLT)[dim(displayLT)[2]]="TOTAL"
displayLT

#Length Total SE sheet
LFSDtot=data.frame(strat=fillzero,tunits=fillzero,flen=fillzero,set=fillzero,sets=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(lenvec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
LFSDtot$strat[inc]=stratavec[s]
LFSDtot$tunits[inc]=tunitsvec[s]
LFSDtot$sets[inc]=setvec[s]
LFSDtot$flen[inc]=lenvec[l]
curset=colnames(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],]),drop=FALSE])[nss]
LFSDtot$set[inc]=curset
seekvalue=lfdata$cage[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]*lfdata$tunits[lfdata$strat==stratavec[s] & lfdata$flen==lenvec[l] & lfdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))LFSDtot$meannum[inc]=seekvalue
}
}
}
}
yyy=tapply(LFSDtot$meannum,list(LFSDtot$strat,LFSDtot$flen),sd,na.rm=T)
LTSE=yyy/sqrt(setvec)
stratabunbylentoterrmat=matrix(NA,length(stratavec),length(lenvec))
for(s in 1:length(stratavec)) {
for(c in 1:length(lenvec))stratabunbylentoterrmat[s,c]=var(LFSDtot$meannum[LFSDtot$strat==stratavec[s] & LFSDtot$flen==lenvec[c]],na.rm=T)
}
StratLenSEtot=rep(NA,length(lenvec))
for(c in 1:length(lenvec))StratLenSEtot[c]=sqrt(sum(stratabunbylentoterrmat[,c]/setvec,na.rm=T))
NumByStratSetTot=aggregate(LFSDtot$meannum, by=list(strat=LFSDtot$strat,tunits=LFSDtot$tunits,set=LFSDtot$set,sets=LFSDtot$sets),sum,na.rm=T)
StratSEtot=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEtot[s]=sqrt(var(NumByStratSetTot$x[NumByStratSetTot$strat==stratavec[s]],na.rm=T))/sqrt(setvec[s])
}
StratVarTot=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarTot[s]=var(NumByStratSetTot$x[NumByStratSetTot$strat==stratavec[s]],na.rm=T)
}
TotalSEtot=sqrt(sum(StratVarTot/setvec,na.rm=T))
displayLTSE=rbind(LTSE,StratLenSEtot)
displayLTSE=cbind(displayLTSE,c(StratSEtot,TotalSEtot))
rownames(displayLTSE)[dim(displayLTSE)[1]]="TOTAL"
colnames(displayLTSE)[dim(displayLTSE)[2]]="TOTAL"
displayLTSE
#StratSEtot and TotalSEtot are the same for the Age Total SE sheet

#Age-related sheets

#age by set sheet
adjabundanceatlengthbyset=tapply(lfdata$cage,list(lfdata$strataset,lfdata$flen),sum,na.rm=T)
adjabundanceatlengthbyset[is.na(adjabundanceatlengthbyset)]=0
adjabundanceatagebyset=matrix(0,dim(adjabundanceatlengthbyset)[1],length(agevec))
for(s in 1:dim(adjabundanceatagebyset)[1])adjabundanceatagebyset[s,]=as.numeric(colSums(LbS[s,]*propage,na.rm=T))
AFbyset=cbind.data.frame("STRATA SLAT SLONG AREA CRUISE SET"=rownames(LbS),adjabundanceatagebyset)
AFbyset=cbind(AFbyset,TOTAL=rowSums(adjabundanceatagebyset,na.rm=T))
AFbyset

#Age Mean sheet; mean number at age by strata, not bumped by trawlable units
adjabundanceatagebystrata=matrix(0,length(stratavec),length(agevec))
for(s in 1:dim(adjabundanceatagebystrata)[1])adjabundanceatagebystrata[s,]=colSums(LMsheet[s,]*propage,na.rm=T)
colnames(adjabundanceatagebystrata)=agevec
rownames(adjabundanceatagebystrata)=stratavec
stratabunbyagevec=rep(NA,length(agevec))
for(c in 1:dim(adjabundanceatagebystrata)[2])stratabunbyagevec[c]=weighted.mean(adjabundanceatagebystrata[,c],tunitsvec,na.rm=T)
displayAM=rbind(adjabundanceatagebystrata,stratabunbyagevec)
displayAM=cbind(displayAM,c(rowSums(adjabundanceatagebystrata,na.rm=T),sum(stratabunbyagevec,na.rm=T)))
#The TOTAL label for the bottom row might be misleading, as the bottom row is the stratified mean
rownames(displayAM)[dim(displayAM)[1]]="TOTAL"
colnames(displayAM)[dim(displayAM)[2]]="TOTAL"
displayAM


#Age Mean SE sheet
AFbysetstrat=substr(AFbyset[,1],1,4)
numericset=as.numeric(substr(AFbyset[,1],27,29))
strataset=paste(substr(AFbyset[,1],16,25),AFbysetstrat,numericset,sep="")
AMSD=matrix(0,length(stratavec),length(agevec))
for(a in 1:length(agevec))AMSD[,a]=tapply(AFbyset[,a+1],list(AFbysetstrat),sd,na.rm=T)
AMSE=AMSD/sqrt(setvec)
#need detailed set-specific equivalent to lfdata for numbers at age
totrecs=sum((adjabundanceatagebyset/adjabundanceatagebyset),na.rm=T)
setrecs=rowSums((adjabundanceatagebyset/adjabundanceatagebyset),na.rm=T)
#number records is number of age records (totrecs) plus number of void sets
voidsets=dim(AFbyset[AFbyset$TOTAL==0.0,])[1]
fillna=rep(NA,(totrecs+voidsets))
afdata=data.frame(strat=fillna, tunits=fillna,strataset=fillna,sets=fillna,age=fillna,fage=fillna,sage=fillna)
i=0
is=0
for(t in 1:length(setvec)) {
for(s in 1:setvec[t]) {
is=is+1
if(setrecs[is]==0) {
i=i+1
afdata[i,]=c(AFbysetstrat[is],tunitsvec[t],strataset[is],setvec[t],"NA","NA","NA")
next
}
for(r in 1:length(agevec)) {
i=i+1
if(adjabundanceatagebyset[is,r]<=0.0) {
i=i-1
next
}
afdata[i,]=c(AFbysetstrat[is],tunitsvec[t],strataset[is],setvec[t],agevec[r],adjabundanceatagebyset[is,r],adjabundanceatagebyset[is,r]*tunitsvec[t])
}
}
}
fillzero=rep(0,length(agevec)*sum(setvec,na.rm=T))
AFSD=data.frame(strat=fillzero,tunits=fillzero,age=fillzero,set=fillzero,sets=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(agevec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
AFSD$strat[inc]=stratavec[s]
AFSD$tunits[inc]=tunitsvec[s]
AFSD$sets[inc]=setvec[s]
AFSD$age[inc]=agevec[l]
curset=colnames(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],]),drop=FALSE])[nss]
curset=substr(curset,4,nchar(curset))
AFSD$set[inc]=curset
seekvalue=afdata$fage[afdata$strat==stratavec[s] & afdata$strataset==curset & afdata$age==agevec[l]]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))AFSD$meannum[inc]=seekvalue
}
}
}
}
AFSD$meannum[AFSD$meannum=="NA"]=0
AFSD$meannum=as.numeric(AFSD$meannum)
yyy=tapply(AFSD$meannum,list(AFSD$strat,AFSD$age),sd,na.rm=T)
AMSE=yyy/sqrt(setvec)
stratabunbyageerrmat=matrix(NA,length(stratavec),length(agevec))
for(s in 1:length(stratavec)) {
for(c in 1:length(agevec))stratabunbyageerrmat[s,c]=var(AFSD$meannum[AFSD$strat==stratavec[s] & AFSD$age==agevec[c]],na.rm=T)
}
StratAgeSE=rep(NA,length(agevec))
for(c in 1:length(agevec))StratAgeSE[c]=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * stratabunbyageerrmat[,c])/setvec,na.rm=T))
NumAgeByStratSet=aggregate(AFSD$meannum, by=list(strat=AFSD$strat,tunits=AFSD$tunits,set=AFSD$set,sets=AFSD$sets),sum,na.rm=T)
StratSEAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEAge[s]=sqrt(var(NumAgeByStratSet$x[NumAgeByStratSet$strat==stratavec[s]],na.rm=T))/sqrt(setvec[s])
}
StratVarAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarAge[s]=var(NumAgeByStratSet$x[NumAgeByStratSet$strat==stratavec[s]],na.rm=T)
}
TotalSEAge=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * StratVarAge)/setvec,na.rm=T))
displayAMSE=rbind(AMSE,StratAgeSE)
displayAMSE=cbind(displayAMSE,c(StratSEAge,TotalSEAge))
rownames(displayAMSE)[dim(displayAMSE)[1]]="TOTAL"
colnames(displayAMSE)[dim(displayAMSE)[2]]="TOTAL"
displayAMSE
#StratSEAge and TotalSEAge are the same for the Length SE sheet

#Age Total sheet; total number at age, bumped by trawlable units
afdata$sage=as.numeric(afdata$sage)
afdata$sets=as.numeric(afdata$sets)
ATsheet=tapply(afdata$sage/afdata$sets,list(afdata$strat,afdata$age),sum,na.rm=T)
ATsheet[is.na(ATsheet)]=0
displayAT=rbind(ATsheet,colSums(ATsheet))
displayAT=cbind(displayAT,rowSums(displayAT))
rownames(displayAT)[dim(displayAT)[1]]="TOTAL"
colnames(displayAT)[dim(displayAT)[2]]="TOTAL"
displayAT

#Age Total SE sheet
fillzero=rep(0,length(agevec)*sum(setvec))
afdata$fage=as.numeric(afdata$fage)
afdata$fage[is.na(afdata$fage)]=0
afdata$strat=as.numeric(afdata$strat)
afdata$age=as.numeric(afdata$age)
afdata$tunits=as.numeric(afdata$tunits)
AFSDtot=data.frame(strat=fillzero,tunits=fillzero,age=fillzero,set=fillzero,meannum=fillzero,stratnum=fillzero)
inc=0
for(s in 1:length(stratavec)) {
for(l in 1:length(agevec)) {
ns=setvec[s]
for(nss in 1:ns) {
inc=inc+1
AFSDtot$strat[inc]=stratavec[s]
AFSDtot$tunits[inc]=tunitsvec[s]
AFSDtot$sets[inc]=setvec[s]
AFSDtot$age[inc]=agevec[l]
curset=names(setmat[as.numeric(rownames(setmat))==stratavec[s],!is.na(setmat[as.numeric(rownames(setmat))==stratavec[s],])])[nss]
curset=substr(curset,4,nchar(curset))
AFSDtot$set[inc]=curset
seekvalue=afdata$fage[afdata$strat==stratavec[s] & afdata$age==agevec[l] & afdata$strataset==curset]*afdata$tunits[afdata$strat==stratavec[s] & afdata$age==agevec[l] & afdata$strataset==curset]
if(length(seekvalue)>0) {
if(!is.na(seekvalue))AFSDtot$meannum[inc]=seekvalue
}
}
}
}
AFSDtot$meannum[AFSD$AFSDtot=="NA"]=0
AFSDtot$meannum=as.numeric(AFSDtot$meannum)
yyy=tapply(AFSDtot$meannum,list(AFSDtot$strat,AFSDtot$age),sd,na.rm=T)
ATSE=yyy/sqrt(setvec)
stratabunbyagetoterrmat=matrix(NA,length(stratavec),length(agevec))
for(s in 1:length(stratavec)) {
for(c in 1:length(agevec))stratabunbyagetoterrmat[s,c]=var(AFSDtot$meannum[AFSDtot$strat==stratavec[s] & AFSDtot$age==agevec[c]],na.rm=T)
}
StratAgeSEtot=rep(NA,length(agevec))
for(c in 1:length(agevec))StratAgeSEtot[c]=sqrt(sum(stratabunbyagetoterrmat[,c]/setvec,na.rm=T))
NumAgeByStratSetTot=aggregate(AFSDtot$meannum, by=list(strat=AFSDtot$strat,tunits=AFSDtot$tunits,set=AFSDtot$set,sets=AFSDtot$sets),sum,na.rm=T)
StratSEtotAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratSEtotAge[s]=sqrt(var(NumAgeByStratSetTot$x[NumAgeByStratSetTot$strat==stratavec[s]],na.rm=T))/sqrt(setvec[s])
}
StratVarTotAge=rep(NA,length(stratavec))
for(s in 1:length(stratavec)) {
StratVarTotAge[s]=var(NumAgeByStratSetTot$x[NumAgeByStratSetTot$strat==stratavec[s]],na.rm=T)
}
TotalSEtotAge=sqrt(sum(StratVarTotAge/setvec,na.rm=T))
displayATSE=rbind(ATSE,StratAgeSEtot)
displayATSE=cbind(displayATSE,c(StratSEtotAge,TotalSEtotAge))
rownames(displayATSE)[dim(displayATSE)[1]]="TOTAL"
colnames(displayATSE)[dim(displayATSE)[2]]="TOTAL"
displayATSE
#StratSEtotAge and TotalSEtotAge are the same for the Length Total SE sheet

#Weight sheets
	dsquery="SELECT * FROM fowler.setwgt"
	channel<-odbcConnect(uid=UserID,pw=PassWord,dsn=UserDSN,case='nochange',rows_at_time=1)
	setwgt<-sqlQuery(channel,dsquery)
	names(setwgt) = c("strat","slat","slong","area","mission","setno","sets","tunits","areanm","setwt") 
setwgt$setwt[is.na(setwgt$setwt)]=0
#display set weights table
setwgt[,c(1:6,10)]
#Weight Mean
WM=tapply(setwgt$setwt/setwgt$sets,list(setwgt$strat),sum,na.rm=T)
xxx=cbind(STRATA=stratavec,TOTAL=WM)
displayWM=rbind(xxx,c("TOTAL",weighted.mean(WM,tunitsvec,na.rm=T)))
displayWM
#Weight Mean SE
WMSE=tapply(setwgt$setwt,list(setwgt$strat),sd,na.rm=T)/sqrt(setvec)
WMvar=tapply(setwgt$setwt,list(setwgt$strat),var,na.rm=T)
StratWSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * WMvar)/setvec,na.rm=T))
displayWMSE=rbind(cbind(STRATA=stratavec,TOTAL=WMSE),c("TOTAL",StratWSE))
displayWMSE
#stratified weight by strata
WMtot=tapply(setwgt$setwt*setwgt$tunits/setwgt$sets,list(setwgt$strat),sum,na.rm=T)
displayWMtot=rbind(cbind(STRATA=stratavec,TOTAL=WMtot),c("TOTAL",sum(WMtot,na.rm=T)))
displayWMtot
#stratified weight SE
WMSEtot=tapply(setwgt$setwt*setwgt$tunits,list(setwgt$strat),sd,na.rm=T)/sqrt(setvec)
WMtotvar=tapply(setwgt$setwt*setwgt$tunits,list(setwgt$strat),var,na.rm=T)
WMgrandtotSE=sqrt(sum(WMtotvar/setvec,na.rm=T))
displaySWMSE=rbind(cbind(STRATA=stratavec,TOTAL=WMSEtot),c("TOTAL",WMgrandtotSE))
displaySWMSE

#Area sheets
#proportion by area sheet
setwgt$gotone=0
setwgt$gotone[setwgt$setwt>0]=1
areaprop=tapply(setwgt$gotone/setwgt$sets,list(setwgt$strat),sum,na.rm=T)
displayArea=rbind(cbind(STRATA=stratavec,TOTAL=areaprop),c("TOTAL",weighted.mean(areaprop,tunitsvec,na.rm=T)))
displayArea
#proportion by area se sheet
areapropse=tapply(setwgt$gotone,list(setwgt$strat),sd,na.rm=T)/sqrt(setvec)
areapropvar=tapply(setwgt$gotone,list(setwgt$strat),var,na.rm=T)
StratAreaSE=sqrt(sum((((tunitsvec * (tunitsvec - setvec))/sum(tunitsvec)^2.) * areapropvar)/setvec,na.rm=T))
displayAreaSE=rbind(cbind(STRATA=stratavec,TOTAL=areapropse),c("TOTAL",StratAreaSE))
displayAreaSE

#proportion of strata in nm^2 with fish
stratarea=tapply(setwgt$areanm*setwgt$gotone,list(setwgt$strat),mean,na.rm=T)
totarea=sum(stratarea)
displayTotArea=rbind(cbind(STRATA=stratavec,TOTAL=stratarea),c("TOTAL",totarea))
displayTotArea
#SE of proportion of strata in nm^2 with fish
stratarease=tapply(setwgt$areanm*setwgt$gotone,list(setwgt$strat),sd,na.rm=T)/sqrt(setvec)
areapropvarnm=tapply(setwgt$gotone*setwgt$areanm,list(setwgt$strat),var,na.rm=T)
areaproptotse=sqrt(sum(areapropvarnm/setvec,na.rm=T))
displayTotAreaSE=rbind(cbind(STRATA=stratavec,TOTAL=stratarease),c("TOTAL",areaproptotse))
displayTotAreaSE

###DONE###



